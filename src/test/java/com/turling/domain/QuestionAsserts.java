package com.turling.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QuestionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAllPropertiesEquals(Question expected, Question actual) {
        assertQuestionAutoGeneratedPropertiesEquals(expected, actual);
        assertQuestionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAllUpdatablePropertiesEquals(Question expected, Question actual) {
        assertQuestionUpdatableFieldsEquals(expected, actual);
        assertQuestionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAutoGeneratedPropertiesEquals(Question expected, Question actual) {
        assertThat(actual)
            .as("Verify Question auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionUpdatableFieldsEquals(Question expected, Question actual) {
        assertThat(actual)
            .as("Verify Question relevant properties")
            .satisfies(a -> assertThat(a.getPoints()).as("check points").isEqualTo(expected.getPoints()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getSolution()).as("check solution").isEqualTo(expected.getSolution()))
            .satisfies(a ->
                assertThat(a.getSolutionExternalLink()).as("check solutionExternalLink").isEqualTo(expected.getSolutionExternalLink())
            )
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()))
            .satisfies(a -> assertThat(a.getUpdateDate()).as("check updateDate").isEqualTo(expected.getUpdateDate()))
            .satisfies(a -> assertThat(a.getCreateBy()).as("check createBy").isEqualTo(expected.getCreateBy()))
            .satisfies(a -> assertThat(a.getCreateByUserId()).as("check createByUserId").isEqualTo(expected.getCreateByUserId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionUpdatableRelationshipsEquals(Question expected, Question actual) {
        assertThat(actual)
            .as("Verify Question relationships")
            .satisfies(a -> assertThat(a.getQuestionCategory()).as("check questionCategory").isEqualTo(expected.getQuestionCategory()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getGrade()).as("check grade").isEqualTo(expected.getGrade()));
    }
}
