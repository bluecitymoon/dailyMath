package com.turling.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StudentSectionLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentSectionLogAllPropertiesEquals(StudentSectionLog expected, StudentSectionLog actual) {
        assertStudentSectionLogAutoGeneratedPropertiesEquals(expected, actual);
        assertStudentSectionLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentSectionLogAllUpdatablePropertiesEquals(StudentSectionLog expected, StudentSectionLog actual) {
        assertStudentSectionLogUpdatableFieldsEquals(expected, actual);
        assertStudentSectionLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentSectionLogAutoGeneratedPropertiesEquals(StudentSectionLog expected, StudentSectionLog actual) {
        assertThat(actual)
            .as("Verify StudentSectionLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentSectionLogUpdatableFieldsEquals(StudentSectionLog expected, StudentSectionLog actual) {
        assertThat(actual)
            .as("Verify StudentSectionLog relevant properties")
            .satisfies(a -> assertThat(a.getStudentId()).as("check studentId").isEqualTo(expected.getStudentId()))
            .satisfies(a -> assertThat(a.getSectionId()).as("check sectionId").isEqualTo(expected.getSectionId()))
            .satisfies(a -> assertThat(a.getTotalCount()).as("check totalCount").isEqualTo(expected.getTotalCount()))
            .satisfies(a -> assertThat(a.getFinishedCount()).as("check finishedCount").isEqualTo(expected.getFinishedCount()))
            .satisfies(a -> assertThat(a.getCorrectRate()).as("check correctRate").isEqualTo(expected.getCorrectRate()))
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()))
            .satisfies(a -> assertThat(a.getUpdateDate()).as("check updateDate").isEqualTo(expected.getUpdateDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentSectionLogUpdatableRelationshipsEquals(StudentSectionLog expected, StudentSectionLog actual) {
        // empty method
    }
}
