package com.turling.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StudentAnswerLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAnswerLogAllPropertiesEquals(StudentAnswerLog expected, StudentAnswerLog actual) {
        assertStudentAnswerLogAutoGeneratedPropertiesEquals(expected, actual);
        assertStudentAnswerLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAnswerLogAllUpdatablePropertiesEquals(StudentAnswerLog expected, StudentAnswerLog actual) {
        assertStudentAnswerLogUpdatableFieldsEquals(expected, actual);
        assertStudentAnswerLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAnswerLogAutoGeneratedPropertiesEquals(StudentAnswerLog expected, StudentAnswerLog actual) {
        assertThat(actual)
            .as("Verify StudentAnswerLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAnswerLogUpdatableFieldsEquals(StudentAnswerLog expected, StudentAnswerLog actual) {
        assertThat(actual)
            .as("Verify StudentAnswerLog relevant properties")
            .satisfies(a -> assertThat(a.getStudentId()).as("check studentId").isEqualTo(expected.getStudentId()))
            .satisfies(a -> assertThat(a.getQuestionId()).as("check questionId").isEqualTo(expected.getQuestionId()))
            .satisfies(a -> assertThat(a.getAnswer()).as("check answer").isEqualTo(expected.getAnswer()))
            .satisfies(a -> assertThat(a.getCorrect()).as("check correct").isEqualTo(expected.getCorrect()))
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()))
            .satisfies(a -> assertThat(a.getWinPoints()).as("check winPoints").isEqualTo(expected.getWinPoints()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAnswerLogUpdatableRelationshipsEquals(StudentAnswerLog expected, StudentAnswerLog actual) {
        // empty method
    }
}
