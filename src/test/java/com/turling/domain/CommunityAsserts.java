package com.turling.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CommunityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityAllPropertiesEquals(Community expected, Community actual) {
        assertCommunityAutoGeneratedPropertiesEquals(expected, actual);
        assertCommunityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityAllUpdatablePropertiesEquals(Community expected, Community actual) {
        assertCommunityUpdatableFieldsEquals(expected, actual);
        assertCommunityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityAutoGeneratedPropertiesEquals(Community expected, Community actual) {
        assertThat(actual)
            .as("Verify Community auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityUpdatableFieldsEquals(Community expected, Community actual) {
        assertThat(actual)
            .as("Verify Community relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getLat()).as("check lat").isEqualTo(expected.getLat()))
            .satisfies(a -> assertThat(a.getLon()).as("check lon").isEqualTo(expected.getLon()))
            .satisfies(a -> assertThat(a.getStudentsCount()).as("check studentsCount").isEqualTo(expected.getStudentsCount()))
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityUpdatableRelationshipsEquals(Community expected, Community actual) {
        assertThat(actual)
            .as("Verify Community relationships")
            .satisfies(a -> assertThat(a.getDistinct()).as("check distinct").isEqualTo(expected.getDistinct()));
    }
}
