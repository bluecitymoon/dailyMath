package com.turling.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QuestionOptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionOptionAllPropertiesEquals(QuestionOption expected, QuestionOption actual) {
        assertQuestionOptionAutoGeneratedPropertiesEquals(expected, actual);
        assertQuestionOptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionOptionAllUpdatablePropertiesEquals(QuestionOption expected, QuestionOption actual) {
        assertQuestionOptionUpdatableFieldsEquals(expected, actual);
        assertQuestionOptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionOptionAutoGeneratedPropertiesEquals(QuestionOption expected, QuestionOption actual) {
        assertThat(actual)
            .as("Verify QuestionOption auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionOptionUpdatableFieldsEquals(QuestionOption expected, QuestionOption actual) {
        assertThat(actual)
            .as("Verify QuestionOption relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getImageUrl()).as("check imageUrl").isEqualTo(expected.getImageUrl()))
            .satisfies(a -> assertThat(a.getIsAnswer()).as("check isAnswer").isEqualTo(expected.getIsAnswer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionOptionUpdatableRelationshipsEquals(QuestionOption expected, QuestionOption actual) {
        assertThat(actual)
            .as("Verify QuestionOption relationships")
            .satisfies(a -> assertThat(a.getQuestion()).as("check question").isEqualTo(expected.getQuestion()));
    }
}
