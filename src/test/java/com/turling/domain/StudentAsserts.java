package com.turling.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StudentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAllPropertiesEquals(Student expected, Student actual) {
        assertStudentAutoGeneratedPropertiesEquals(expected, actual);
        assertStudentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAllUpdatablePropertiesEquals(Student expected, Student actual) {
        assertStudentUpdatableFieldsEquals(expected, actual);
        assertStudentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentAutoGeneratedPropertiesEquals(Student expected, Student actual) {
        assertThat(actual)
            .as("Verify Student auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentUpdatableFieldsEquals(Student expected, Student actual) {
        assertThat(actual)
            .as("Verify Student relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getBirthday()).as("check birthday").isEqualTo(expected.getBirthday()))
            .satisfies(a -> assertThat(a.getRegisterDate()).as("check registerDate").isEqualTo(expected.getRegisterDate()))
            .satisfies(a -> assertThat(a.getUpdateDate()).as("check updateDate").isEqualTo(expected.getUpdateDate()))
            .satisfies(a ->
                assertThat(a.getLatestContractEndDate()).as("check latestContractEndDate").isEqualTo(expected.getLatestContractEndDate())
            )
            .satisfies(a -> assertThat(a.getContactNumber()).as("check contactNumber").isEqualTo(expected.getContactNumber()))
            .satisfies(a -> assertThat(a.getParentsName()).as("check parentsName").isEqualTo(expected.getParentsName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentUpdatableRelationshipsEquals(Student expected, Student actual) {
        assertThat(actual)
            .as("Verify Student relationships")
            .satisfies(a -> assertThat(a.getSchool()).as("check school").isEqualTo(expected.getSchool()))
            .satisfies(a -> assertThat(a.getCommunity()).as("check community").isEqualTo(expected.getCommunity()));
    }
}
