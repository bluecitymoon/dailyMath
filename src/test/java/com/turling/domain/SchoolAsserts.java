package com.turling.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SchoolAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolAllPropertiesEquals(School expected, School actual) {
        assertSchoolAutoGeneratedPropertiesEquals(expected, actual);
        assertSchoolAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolAllUpdatablePropertiesEquals(School expected, School actual) {
        assertSchoolUpdatableFieldsEquals(expected, actual);
        assertSchoolUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolAutoGeneratedPropertiesEquals(School expected, School actual) {
        assertThat(actual)
            .as("Verify School auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolUpdatableFieldsEquals(School expected, School actual) {
        assertThat(actual)
            .as("Verify School relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a ->
                assertThat(a.getRegisteredStudentsCount())
                    .as("check registeredStudentsCount")
                    .isEqualTo(expected.getRegisteredStudentsCount())
            )
            .satisfies(a -> assertThat(a.getPinyin()).as("check pinyin").isEqualTo(expected.getPinyin()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchoolUpdatableRelationshipsEquals(School expected, School actual) {
        assertThat(actual)
            .as("Verify School relationships")
            .satisfies(a -> assertThat(a.getDistinct()).as("check distinct").isEqualTo(expected.getDistinct()));
    }
}
